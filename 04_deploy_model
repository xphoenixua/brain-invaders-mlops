{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "4d6d9c52-65b9-4b6e-93b8-7c0489616254",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "import requests\n",
    "import json\n",
    "import mlflow\n",
    "\n",
    "\n",
    "# --- define and get notebook widgets for configuration ---\n",
    "dbutils.widgets.text(\"serving_endpoint_name\", \"p300\", \"Name of the Serving Endpoint\")\n",
    "dbutils.widgets.text(\"registered_model_name\", \"P300-Classifier\", \"Workspace Registered Model Name\")\n",
    "\n",
    "# --- define and get notebook widgets for configuration ---\n",
    "serving_endpoint_name = dbutils.widgets.get(\"serving_endpoint_name\")\n",
    "registered_model_name = dbutils.widgets.get(\"registered_model_name\")\n",
    "challenger_entity_name = \"challenger\"\n",
    "champion_entity_name = \"champion\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "54149d09-afa4-4551-89d3-502284960e87",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# --- configure API clients ---\n",
    "databricks_host = dbutils.notebook.entry_point.getDbutils().notebook().getContext().apiUrl().get()\n",
    "databricks_token = dbutils.notebook.entry_point.getDbutils().notebook().getContext().apiToken().get()\n",
    "headers = {\"Authorization\": f\"Bearer {databricks_token}\", \"Content-Type\": \"application/json\"}\n",
    "\n",
    "# configure MLflow client\n",
    "mlflow.set_registry_uri(\"databricks\")\n",
    "mlflow_client = mlflow.tracking.MlflowClient()\n",
    "\n",
    "# --- find the latest model version in the 'Staging' stage ---\n",
    "new_challenger_version_info = None\n",
    "staging_versions = mlflow_client.get_latest_versions(name=registered_model_name, stages=[\"Staging\"])\n",
    "if not staging_versions:\n",
    "    dbutils.notebook.exit(f\"no model version found in 'Staging' for '{registered_model_name}'.\")\n",
    "new_challenger_version_info = staging_versions[0]\n",
    "new_challenger_version_num = new_challenger_version_info.version\n",
    "display(f\"found latest 'Staging' model: Version {new_challenger_version_num}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "c48d07d7-a1f7-4c42-8bad-137191cc4a50",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "    endpoint_creation_payload = {\n",
    "        \"name\": serving_endpoint_name,\n",
    "        \"config\": {\n",
    "            \"served_entities\": [\n",
    "                {\"name\": champion_entity_name, \"entity_name\": registered_model_name, \"entity_version\": new_challenger_version_num, \"workload_size\": \"Small\", \"scale_to_zero_enabled\": True},\n",
    "                {\"name\": challenger_entity_name, \"entity_name\": registered_model_name, \"entity_version\": new_challenger_version_num, \"workload_size\": \"Small\", \"scale_to_zero_enabled\": True}\n",
    "            ],\n",
    "            \"traffic_config\": { \"routes\": [ {\"served_entity_name\": champion_entity_name, \"traffic_percentage\": 100}, {\"served_entity_name\": challenger_entity_name, \"traffic_percentage\": 0} ] }\n",
    "        }\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "2347f2a8-8dfb-48a5-b2ea-671c33a197c3",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# --- check if the serving endpoint already exists ---\n",
    "endpoint_url = f\"{databricks_host}/api/2.0/serving-endpoints/{serving_endpoint_name}\"\n",
    "response = requests.get(endpoint_url, headers=headers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "6edac194-b868-45ad-8736-2a73c4ea7d74",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# --- get the current configuration of the serving endpoint ---\n",
    "if response.status_code == 404:\n",
    "    # --- case 1: endpoint does not exist. create it for the first time. ---\n",
    "    print(f\"serving endpoint '{serving_endpoint_name}' not found. creating new endpoint.\")\n",
    "    print(f\"seeding endpoint: '{champion_entity_name}' and '{challenger_entity_name}' will both serve version {new_challenger_version_info.version}.\")\n",
    "\n",
    "    creation_url = f\"{databricks_host}/api/2.0/serving-endpoints\"\n",
    "    creation_response = requests.post(creation_url, headers=headers, data=json.dumps(endpoint_creation_payload))\n",
    "    creation_response.raise_for_status()\n",
    "    print(\"endpoint creation request accepted. deployment is in progress.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "eff86c72-3dae-4273-a30b-3e4293715243",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "if response.status_code == 200:\n",
    "    # --- case 2: endpoint exists. update it. ---\n",
    "    print(f\"serving endpoint '{serving_endpoint_name}' found. proceeding with update.\")\n",
    "    \n",
    "    endpoint_config = response.json()\n",
    "    current_config = endpoint_config.get(\"config\", {})\n",
    "    served_entities = current_config.get(\"served_entities\", [])\n",
    "    traffic_config = current_config.get(\"traffic_config\", {})\n",
    "    found_challenger = False\n",
    "\n",
    "    # modify the challenger entity to point to the new version\n",
    "    for entity in served_entities:\n",
    "        if entity.get('name') == challenger_entity_name:\n",
    "            found_challenger_entity = True\n",
    "            \n",
    "            # get details of the currently served version to find its run_id\n",
    "            current_served_version_num = entity.get('entity_version')\n",
    "            current_served_version_info = mlflow_client.get_model_version(name=registered_model_name, version=current_served_version_num)\n",
    "            current_run_id = current_served_version_info.run_id\n",
    "            print(f\"found challenger entity. currently serving version: {current_served_version_num} (from run ID: {current_run_id}).\")\n",
    "\n",
    "            new_challenger_run_id = new_challenger_version_info.run_id            \n",
    "            if current_run_id == new_challenger_run_id:\n",
    "                dbutils.notebook.exit(f\"challenger is already serving the model from the latest staging run ({new_challenger_run_id}). no update needed.\")\n",
    "\n",
    "            # if run IDs are different, or if we couldn't get details of the old one, proceed with update\n",
    "            new_challenger_version_num = new_challenger_version_info.version\n",
    "            print(f\"updating challenger to serve version: {new_challenger_version_num}\")\n",
    "            entity['entity_version'] = new_challenger_version_num\n",
    "            break\n",
    "\n",
    "    # construct the update payload\n",
    "    update_payload = {\n",
    "        \"served_entities\": served_entities,\n",
    "        \"traffic_config\": traffic_config\n",
    "    }\n",
    "    update_url = f\"{databricks_host}/api/2.0/serving-endpoints/{serving_endpoint_name}/config\"\n",
    "    update_response = requests.put(update_url, headers=headers, data=json.dumps(update_payload))\n",
    "    \n",
    "    if update_response.status_code == 200:\n",
    "        print(\"endpoint update request accepted successfully. update is in progress.\")\n",
    "    else:\n",
    "        print(f\"error updating endpoint. Status: {update_response.status_code}, Response: {update_response.text}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "6725eb8e-02ea-4611-8b44-095b263aa137",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "computePreferences": null,
   "dashboards": [],
   "environmentMetadata": {
    "base_environment": "",
    "environment_version": "2"
   },
   "inputWidgetPreferences": null,
   "language": "python",
   "notebookMetadata": {
    "pythonIndentUnit": 4
   },
   "notebookName": "04_update_challenger_endpoint",
   "widgets": {
    "registered_model_name": {
     "currentValue": "P300-Classifier",
     "nuid": "fbc2e30e-294c-4e50-82be-94723b321f09",
     "typedWidgetInfo": {
      "autoCreated": false,
      "defaultValue": "P300-Classifier",
      "label": "Workspace Registered Model Name",
      "name": "registered_model_name",
      "options": {
       "widgetDisplayType": "Text",
       "validationRegex": null
      },
      "parameterDataType": "String"
     },
     "widgetInfo": {
      "widgetType": "text",
      "defaultValue": "P300-Classifier",
      "label": "Workspace Registered Model Name",
      "name": "registered_model_name",
      "options": {
       "widgetType": "text",
       "autoCreated": null,
       "validationRegex": null
      }
     }
    },
    "serving_endpoint_name": {
     "currentValue": "p300",
     "nuid": "9bd72386-6ffe-4f48-bc21-aabc5570e287",
     "typedWidgetInfo": {
      "autoCreated": false,
      "defaultValue": "p300",
      "label": "Name of the Serving Endpoint",
      "name": "serving_endpoint_name",
      "options": {
       "widgetDisplayType": "Text",
       "validationRegex": null
      },
      "parameterDataType": "String"
     },
     "widgetInfo": {
      "widgetType": "text",
      "defaultValue": "p300",
      "label": "Name of the Serving Endpoint",
      "name": "serving_endpoint_name",
      "options": {
       "widgetType": "text",
       "autoCreated": null,
       "validationRegex": null
      }
     }
    }
   }
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
